- The channel owner is a channel administrator. They can set other users as administrators.


- before add users who want to be administrators:

=>  chcek if current user is admin or owner
        - if it is can set 
    else
        dont have permission


=> if the room is dual room dont change anything


- create function change status of room , if is protected should create password , remove the password , change the password

=> return in first the staus of room
    - if wawnt to be protected should set a password


- create function return boolean value if leave the room or not


- when owner who create room if leave it
    - make the first admin added the owner
    - if this room dont have admin make first user the owner
 
- A user who is an administrator of a channel can kick, ban or mute (for a limited time) other users, but not the channel owners.



const idOfuser =   this.jwtService.verify(body.auth,{ secret: process.env.JWT_SECRET });
        
        if(!idOfuser)
        {
            console.log("user not found");
            return 
        }
     
        const roomId = await this.utils.getRoomIdByName(body.roomName);
 
        if (roomId) 
        {
            const userType = await this.utils.getUserType(roomId, idOfuser['sub']); // 
            if(userType)
            {
                if (userType.userType === 'ADMIN' || userType.userType === 'OWNER') 
                {
                    
                    if(body.roomStatus === RoomType.PRIVATE || body.roomStatus === RoomType.PROTECTED || body.roomStatus === RoomType.PUBLIC)
                    {
                        const roomType = await this.utils.getRoomById(roomId);

                        if(roomType.roomType !== body.roomType)
                        {
                            if(body.roomType === 'PROTECTED')
                                await this.roomService.changeRoomType(body.roomType,roomId, "1234");
                            else
                                await this.roomService.changeRoomType(body.roomType,roomId);
                        }
                        else
                        {
                            console.log("you enter the same Type of the room.")
                        }
                    }
                    else
                    {
                        console.log("room Type you entered is not found.")
                    }
                    
                }
                else
                {
                    console.log("cannot have the permission to change room Type.")
                }
            }

        }
        else
        {
            console.log("roomm not found")
            return res.status(404).send({ message: "roomm not found" });
        }