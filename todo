let listOfRoomsOfUser:string[] = [];
        let indexes:number[] = [];

        const idOfuser = await this.roomService.getUserIdByEmail(this.user.email);

                 
        const rooms = await this.roomService.getRoomsForUser(idOfuser); // all rooms who this user is member into it

        
        for(let i = 0; i < rooms.length; i++)
        {
            listOfRoomsOfUser.push(rooms[i]['room']['room_name']);
            indexes.push(i);
        }
        
        this.server.to(socket.id).emit("list-rooms",{listOfRoomsOfUser,indexes });


        @SubscribeMessage('create-room')  // after entred the in infos in create room form should reload the  page => this is bug
        async onCreateRoom(@MessageBody() roomandUsers: roomAndUsers) 
        {
            const idOfuser =   this.jwtService.verify(roomandUsers['auth']['token'],{ secret: process.env.JWT_SECRET })
            
            const ifUserExist = await this.roomService.getUsersId(idOfuser['sub'],roomandUsers.users)
             
            if(roomandUsers.roomName !== '' && ifUserExist) // if room name is not empty and users  exist
            {
                
                const rtn = await this.roomService.createRoom(roomandUsers, idOfuser['sub']); // return all the room who the admin is member into it
               
    
                
                if(rtn === 1)
                    this.server.to(this.socketOfcurrentUser.id).emit("error",` ${roomandUsers.roomName} room name is aleredy in use.`)
               
                if(rtn === 3)
                    this.server.to(this.socketOfcurrentUser.id).emit("error",`you try to enter the admin`)
            
                if(rtn === 4)
                    this.server.to(this.socketOfcurrentUser.id).emit("error",`the user is aleredy in this room.`)
                
                const adminRooms = await this.roomService.getRoomsForUser(idOfuser['sub']) // return all the room who the admin is member into it
        
                
                for(const room of adminRooms)
                {
                    const usersInRooms = await this.roomService.getUsersInRooms(room.roomId) // return all users in evry room
    
                    for(const usersInRoom of usersInRooms) // send to evry user the rooms who is member into it
                    {
                        const sockerIds = await this.connectedUsersService.getSocketIdsByUserId(usersInRoom['userId']);
                        
                        for(const socketId of sockerIds)
                        {
                            this.server.to(socketId['socketId']).emit("rooms",room.room.room_name);
                        }
                    }
                }
    
            }
        }
    
    
        @SubscribeMessage('chat')  
        async displayRooms(@MessageBody() jwtAndSocketId: object) 
        {
            console.log("here")
            const idOfuser =   this.jwtService.verify(jwtAndSocketId['jwt'],{ secret: process.env.JWT_SECRET })
            
            const ifUserExist = await this.usersService.findOneByNickname(idOfuser['nickname'])
    
            const rooms = await this.roomService.getRoomsForUser(ifUserExist.id);
            
            let listOfRoomsOfUser:string[] = [];
            let indexes:number[] = [];
    
            
            for(let i = 0; i < rooms.length; i++)
            {
                listOfRoomsOfUser.push(rooms[i]['room']['room_name']);
                indexes.push(i);
            }
            
            this.server.to(jwtAndSocketId['sockerIds']).emit("list-rooms",{listOfRoomsOfUser,indexes });  //  evry client will connected will display the rooms who is member into it
    
        }
        